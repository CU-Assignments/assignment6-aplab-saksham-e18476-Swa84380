// Definition for a binary tree node.
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int val) { this.val = val; }
}

public class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
        return buildBST(nums, 0, nums.length - 1);
    }

    private TreeNode buildBST(int[] nums, int left, int right) {
        if (left > right) {
            return null; // Base case: no elements to form a subtree
        }
        
        // Find the middle element to maintain the balance
        int mid = left + (right - left) / 2;
        
        // Create the root node with the middle element
        TreeNode root = new TreeNode(nums[mid]);
        
        // Recursively build the left and right subtrees
        root.left = buildBST(nums, left, mid - 1);  // Left subtree
        root.right = buildBST(nums, mid + 1, right); // Right subtree
        
        return root;
    }

    // Helper function to print the tree (for demonstration purposes)
    public void inorderTraversal(TreeNode root) {
        if (root != null) {
            inorderTraversal(root.left);
            System.out.print(root.val + " ");
            inorderTraversal(root.right);
        }
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        int[] nums1 = {-10, -3, 0, 5, 9};
        TreeNode root1 = solution.sortedArrayToBST(nums1);
        
        System.out.print("Inorder Traversal of Tree 1: ");
        solution.inorderTraversal(root1); // Should print the original sorted array
        System.out.println();

        int[] nums2 = {1, 3};
        TreeNode root2 = solution.sortedArrayToBST(nums2);

        System.out.print("Inorder Traversal of Tree 2: ");
        solution.inorderTraversal(root2); // Should print the original sorted array
        System.out.println();
    }
}
